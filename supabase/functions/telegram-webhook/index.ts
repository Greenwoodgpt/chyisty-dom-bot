import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  date: number;
  text?: string;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  data?: string;
}

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
}

interface UserState {
  user_id: number;
  state: string;
  temp_data: any;
}

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!;
const TELEGRAM_ADMIN_CHAT_ID = Deno.env.get('TELEGRAM_ADMIN_CHAT_ID')!;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: replyMarkup,
      parse_mode: 'HTML'
    })
  });
  return response.json();
}

// –û—Ç–≤–µ—Ç –Ω–∞ callback query
async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text
    })
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserState(userId: number): Promise<UserState> {
  const { data, error } = await supabase
    .from('tg_user_state')
    .select('*')
    .eq('user_id', userId)
    .single();

  if (error || !data) {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const newState: UserState = {
      user_id: userId,
      state: 'start',
      temp_data: {}
    };
    
    await supabase
      .from('tg_user_state')
      .upsert(newState);
    
    return newState;
  }
  
  return data;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUserState(userId: number, state: string, tempData?: any) {
  const updateData: any = {
    user_id: userId,
    state,
    updated_at: new Date().toISOString()
  };
  
  if (tempData !== undefined) {
    updateData.temp_data = tempData;
  }
  
  await supabase
    .from('tg_user_state')
    .upsert(updateData);
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenuKeyboard() {
  return {
    inline_keyboard: [
      [{ text: 'üóëÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'new_order' }],
      [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', callback_data: 'contact_operator' }],
      [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
    ]
  };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
function getSizeKeyboard() {
  return {
    inline_keyboard: [
      [{ text: '–û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥) - 100‚ÇΩ', callback_data: 'size_one_bag' }],
      [{ text: '–î–≤–∞ –ø–∞–∫–µ—Ç–∞ - 200‚ÇΩ', callback_data: 'size_two_bags' }],
      [{ text: '–¢—Ä–∏ –ø–∞–∫–µ—Ç–∞ - 300‚ÇΩ', callback_data: 'size_three_bags' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
    ]
  };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
function getTimeKeyboard() {
  return {
    inline_keyboard: [
      [{ text: '‚è∞ –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞', callback_data: 'time_within_hour' }],
      [{ text: 'üåÖ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º', callback_data: 'time_tomorrow_morning' }],
      [{ text: 'üìÖ –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è', callback_data: 'time_custom' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
    ]
  };
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function getConfirmationKeyboard() {
  return {
    inline_keyboard: [
      [{ text: '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_order' }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
    ]
  };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(message: TelegramMessage) {
  await updateUserState(message.from.id, 'start');
  
  const welcomeText = `
üóëÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –≤—ã–≤–æ–∑–∞ –º—É—Å–æ—Ä–∞!</b>

–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞.

<b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ –û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥) - 100‚ÇΩ
‚Ä¢ –î–≤–∞ –ø–∞–∫–µ—Ç–∞ - 200‚ÇΩ
‚Ä¢ –¢—Ä–∏ –ø–∞–∫–µ—Ç–∞ - 300‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  await sendMessage(message.chat.id, welcomeText, getMainMenuKeyboard());
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelp(message: TelegramMessage) {
  const helpText = `
‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
2. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Å–æ—Ä–∞
4. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–≤–æ–∑–∞
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

<b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ –û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥) - 100‚ÇΩ
‚Ä¢ –î–≤–∞ –ø–∞–∫–µ—Ç–∞ - 200‚ÇΩ
‚Ä¢ –¢—Ä–∏ –ø–∞–∫–µ—Ç–∞ - 300‚ÇΩ

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
üìû –î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é`;

  await sendMessage(message.chat.id, helpText, getMainMenuKeyboard());
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ë–î
async function saveOrder(userId: number, chatId: number, user: TelegramUser, tempData: any) {
  const sizeMap: { [key: string]: number } = {
    'one_bag': 100,
    'two_bags': 200,
    'three_bags': 300
  };

  const order = {
    user_id: userId,
    chat_id: chatId,
    username: user.username || null,
    first_name: user.first_name,
    last_name: user.last_name || null,
    address: tempData.address,
    size_option: tempData.size,
    time_option: tempData.time,
    custom_time: tempData.custom_time || null,
    amount: sizeMap[tempData.size] * 100, // –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    status: 'new'
  };

  const { data, error } = await supabase
    .from('orders')
    .insert(order)
    .select()
    .single();

  if (error) {
    console.error('Error saving order:', error);
    return null;
  }

  return data;
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async function notifyAdmin(order: any) {
  const sizeNames: { [key: string]: string } = {
    'one_bag': '–û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥)',
    'two_bags': '–î–≤–∞ –ø–∞–∫–µ—Ç–∞',
    'three_bags': '–¢—Ä–∏ –ø–∞–∫–µ—Ç–∞'
  };

  const timeNames: { [key: string]: string } = {
    'within_hour': '–í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞',
    'tomorrow_morning': '–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º',
    'custom': '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è'
  };

  const adminText = `
üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${order.id.slice(-8)}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.first_name} ${order.last_name || ''}
üì± <b>Username:</b> ${order.username ? '@' + order.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${order.address}
üì¶ <b>–û–±—ä–µ–º:</b> ${sizeNames[order.size_option]}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${timeNames[order.time_option]}${order.custom_time ? ' (' + order.custom_time + ')' : ''}
üí∞ <b>–°—É–º–º–∞:</b> ${order.amount / 100}‚ÇΩ

üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${new Date(order.created_at).toLocaleString('ru-RU')}`;

  await sendMessage(parseInt(TELEGRAM_ADMIN_CHAT_ID), adminText);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
async function handleCallbackQuery(callbackQuery: TelegramCallbackQuery) {
  const userId = callbackQuery.from.id;
  const chatId = callbackQuery.message!.chat.id;
  const data = callbackQuery.data!;
  
  await answerCallbackQuery(callbackQuery.id);
  
  const userState = await getUserState(userId);
  
  switch (data) {
    case 'new_order':
      await updateUserState(userId, 'awaiting_address', {});
      await sendMessage(chatId, 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):');
      break;
      
    case 'contact_operator':
      await sendMessage(chatId, 'üìû –î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @operator_username –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (xxx) xxx-xx-xx');
      break;
      
    case 'help':
      await handleHelp(callbackQuery.message!);
      break;
      
    case 'cancel':
      await updateUserState(userId, 'start', {});
      await sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.', getMainMenuKeyboard());
      break;
      
    case 'size_one_bag':
    case 'size_two_bags':
    case 'size_three_bags':
      const size = data.replace('size_', '');
      const tempData = { ...userState.temp_data, size };
      await updateUserState(userId, 'awaiting_time', tempData);
      await sendMessage(chatId, '‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–±—Ä–∞—Ç—å –º—É—Å–æ—Ä?', getTimeKeyboard());
      break;
      
    case 'time_within_hour':
    case 'time_tomorrow_morning':
      const time = data.replace('time_', '');
      const tempDataTime = { ...userState.temp_data, time };
      await updateUserState(userId, 'awaiting_confirmation', tempDataTime);
      await showOrderSummary(chatId, tempDataTime);
      break;
      
    case 'time_custom':
      const tempDataCustom = { ...userState.temp_data, time: 'custom' };
      await updateUserState(userId, 'awaiting_custom_time', tempDataCustom);
      await sendMessage(chatId, 'üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∑–∞–≤—Ç—Ä–∞ –≤ 14:00" –∏–ª–∏ "28.12 –≤ 10:30"):');
      break;
      
    case 'confirm_order':
      const order = await saveOrder(userId, chatId, callbackQuery.from, userState.temp_data);
      if (order) {
        await updateUserState(userId, 'start', {});
        await sendMessage(chatId, `‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #${order.id.slice(-8)}\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`, getMainMenuKeyboard());
        await notifyAdmin(order);
      } else {
        await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', getMainMenuKeyboard());
      }
      break;
  }
}

// –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤ –∑–∞–∫–∞–∑–∞
async function showOrderSummary(chatId: number, tempData: any) {
  const sizeNames: { [key: string]: string } = {
    'one_bag': '–û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥)',
    'two_bags': '–î–≤–∞ –ø–∞–∫–µ—Ç–∞',
    'three_bags': '–¢—Ä–∏ –ø–∞–∫–µ—Ç–∞'
  };
  
  const sizeAmounts: { [key: string]: number } = {
    'one_bag': 100,
    'two_bags': 200,
    'three_bags': 300
  };
  
  const timeNames: { [key: string]: string } = {
    'within_hour': '–í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞',
    'tomorrow_morning': '–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º',
    'custom': '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è'
  };

  const summaryText = `
üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>

üìç <b>–ê–¥—Ä–µ—Å:</b> ${tempData.address}
üì¶ <b>–û–±—ä–µ–º:</b> ${sizeNames[tempData.size]}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${timeNames[tempData.time]}${tempData.custom_time ? ' (' + tempData.custom_time + ')' : ''}
üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${sizeAmounts[tempData.size]}‚ÇΩ`;

  await sendMessage(chatId, summaryText, getConfirmationKeyboard());
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleTextMessage(message: TelegramMessage) {
  const userId = message.from.id;
  const chatId = message.chat.id;
  const text = message.text!;
  
  const userState = await getUserState(userId);
  
  switch (userState.state) {
    case 'awaiting_address':
      if (text.length < 10) {
        await sendMessage(chatId, '‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):');
        return;
      }
      
      const tempData = { address: text };
      await updateUserState(userId, 'awaiting_size', tempData);
      await sendMessage(chatId, 'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –º—É—Å–æ—Ä–∞ –Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏:', getSizeKeyboard());
      break;
      
    case 'awaiting_custom_time':
      const tempDataCustomTime = { ...userState.temp_data, custom_time: text };
      await updateUserState(userId, 'awaiting_confirmation', tempDataCustomTime);
      await showOrderSummary(chatId, tempDataCustomTime);
      break;
      
    case 'start':
    default:
      await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:', getMainMenuKeyboard());
      break;
  }
}

serve(async (req) => {
  // Health check + CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }
  if (req.method === 'GET') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    console.log('telegram-webhook request received', { method: req.method });
    const update: TelegramUpdate = await req.json();
    
    if (update.message) {
      const message = update.message;
      
      if (message.text?.startsWith('/start')) {
        await handleStart(message);
      } else if (message.text?.startsWith('/help')) {
        await handleHelp(message);
      } else if (message.text) {
        await handleTextMessage(message);
      }
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
    
    return new Response('OK', {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error processing update:', error);
    return new Response('Error', {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});