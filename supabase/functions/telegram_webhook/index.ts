import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
  callback_query?: TelegramCallbackQuery;
}

interface TelegramMessage {
  message_id: number;
  from: TelegramUser;
  chat: TelegramChat;
  date: number;
  text?: string;
  photo?: TelegramPhotoSize[];
}

interface TelegramPhotoSize {
  file_id: string;
  file_unique_id: string;
  width: number;
  height: number;
  file_size?: number;
}

interface TelegramCallbackQuery {
  id: string;
  from: TelegramUser;
  message?: TelegramMessage;
  data?: string;
}

interface TelegramUser {
  id: number;
  is_bot: boolean;
  first_name: string;
  last_name?: string;
  username?: string;
}

interface TelegramChat {
  id: number;
  type: string;
}

interface UserState {
  user_id: number;
  state: string;
  data: any;
}

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!;
const TELEGRAM_ADMIN_CHAT_ID = Deno.env.get('TELEGRAM_ADMIN_CHAT_ID')!;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, text, reply_markup: replyMarkup, parse_mode: 'HTML' })
  });
  const bodyText = await response.text();
  if (!response.ok) {
    console.error('sendMessage failed', { status: response.status, body: bodyText });
  } else {
    console.log('sendMessage ok', { status: response.status });
  }
  try { return JSON.parse(bodyText); } catch { return { raw: bodyText }; }
}

async function sendPhoto(chatId: number, photoFileId: string, caption?: string) {
  const response = await fetch(`${TELEGRAM_API_URL}/sendPhoto`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: chatId, photo: photoFileId, caption })
  });
  const bodyText = await response.text();
  if (!response.ok) {
    console.error('sendPhoto failed', { status: response.status, body: bodyText });
  } else {
    console.log('sendPhoto ok', { status: response.status });
  }
  try { return JSON.parse(bodyText); } catch { return { raw: bodyText }; }
}

async function answerCallbackQuery(callbackQueryId: string, text?: string) {
  await fetch(`${TELEGRAM_API_URL}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ callback_query_id: callbackQueryId, text })
  });
}

async function getUserState(userId: number): Promise<UserState> {
  const { data, error } = await supabase
    .from('tg_user_state')
    .select('*')
    .eq('user_id', userId)
    .single();

  if (error || !data) {
    const newState: UserState = { user_id: userId, state: 'start', data: {} };
    await supabase.from('tg_user_state').upsert(newState);
    return newState;
  }
  return data;
}

async function updateUserState(userId: number, state: string, tempData?: any) {
  const updateData: any = { user_id: userId, state, updated_at: new Date().toISOString() };
  if (tempData !== undefined) updateData.data = tempData;
  await supabase.from('tg_user_state').upsert(updateData);
}

function getMainMenuKeyboard() {
  return { inline_keyboard: [
    [{ text: 'üóëÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'new_order' }],
    [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º', callback_data: 'contact_operator' }],
    [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
  ]};
}

function getProviderMainMenuKeyboard() {
  return { inline_keyboard: [
    [{ text: 'üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'provider_new_orders' }],
    [{ text: 'üõ† –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'provider_my_orders' }],
    [{ text: 'üí∞ –ö–æ—à–µ–ª—ë–∫', callback_data: 'provider_wallet' }],
    [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'provider_settings' }],
  ]};
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ ¬´–ù–∞–∑–∞–¥ / –í –Ω–∞—á–∞–ª–æ¬ª
function getBackHomeRow() {
  return [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'go_back' }, { text: 'üè† –í –Ω–∞—á–∞–ª–æ', callback_data: 'go_home' }];
}

function getRoleKeyboard() {
  return { inline_keyboard: [
    [{ text: 'üõí –Ø –∑–∞–∫–∞–∑—á–∏–∫', callback_data: 'role_customer' }],
    [{ text: 'üßπ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', callback_data: 'role_performer' }],
    getBackHomeRow()
  ]};
}

function getStartOrderKeyboard() {
  return { inline_keyboard: [
    [{ text: '‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å', callback_data: 'start_order_yes' }],
    [{ text: '‚ùå –ù–µ—Ç, –ø–æ–∑–∂–µ', callback_data: 'start_order_no' }],
    getBackHomeRow()
  ]};
}

function getSaveAddressKeyboard() {
  return { inline_keyboard: [
    [{ text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'save_address_yes' }],
    [{ text: '‚õî –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å', callback_data: 'save_address_no' }],
    getBackHomeRow()
  ]};
}

function getTimeChoiceKeyboard() {
  return { inline_keyboard: [
    [{ text: '‚ö° –°—Ä–æ—á–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)', callback_data: 'time_choice_urgent' }],
    [{ text: 'üïí –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è', callback_data: 'time_choice_select' }],
    getBackHomeRow()
  ]};
}

function getTimeSlotsKeyboard() {
  return { inline_keyboard: [
    [{ text: '–ß–µ—Ä–µ–∑ 1 —á–∞—Å', callback_data: 'slot_1h' }],
    [{ text: '–°–µ–≥–æ–¥–Ω—è 18:00‚Äì20:00', callback_data: 'slot_today_evening' }],
    [{ text: '–ó–∞–≤—Ç—Ä–∞ 10:00‚Äì12:00', callback_data: 'slot_tomorrow_morning' }],
    [{ text: '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è', callback_data: 'time_enter_custom' }],
    getBackHomeRow()
  ]};
}

function getBagCountKeyboard() {
  return { inline_keyboard: [
    [{ text: '1 –º–∞–ª–µ–Ω—å–∫–∏–π ü•ü', callback_data: 'bag_1_small' }],
    [{ text: '1 —Å—Ä–µ–¥–Ω–∏–π üçï', callback_data: 'bag_1_medium' }],
    [{ text: '1 –±–æ–ª—å—à–æ–π üéí', callback_data: 'bag_1_large' }],
    [{ text: '2 –ø–∞–∫–µ—Ç–∞ ‚ûï', callback_data: 'bag_2' }],
    [{ text: '3 –ø–∞–∫–µ—Ç–∞ ‚ûï', callback_data: 'bag_3' }],
    getBackHomeRow()
  ]};
}

function getBagSizeKeyboard(idx: number) {
  return { inline_keyboard: [
    [{ text: `–ü–∞–∫–µ—Ç ${idx}: –º–∞–ª–µ–Ω—å–∫–∏–π ü•ü`, callback_data: 'bag_size_small' }],
    [{ text: `–ü–∞–∫–µ—Ç ${idx}: —Å—Ä–µ–¥–Ω–∏–π üçï`, callback_data: 'bag_size_medium' }],
    [{ text: `–ü–∞–∫–µ—Ç ${idx}: –±–æ–ª—å—à–æ–π üéí`, callback_data: 'bag_size_large' }],
    getBackHomeRow()
  ]};
}

function getPaymentKeyboard(amountSet: boolean) {
  const rows: any[] = [];
  rows.push([{ text: 'üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ (100‚ÇΩ)', callback_data: 'payment_min' }]);
  rows.push([{ text: '‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É', callback_data: 'payment_custom' }]);
  if (amountSet) rows.push([{ text: '‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data: 'pay_now' }]);
  rows.push(getBackHomeRow());
  return { inline_keyboard: rows };
}

function getCommentChoiceKeyboard() {
  return { inline_keyboard: [
    [{ text: 'üìù –î–∞, –¥–æ–±–∞–≤–∏—Ç—å', callback_data: 'comment_yes' }],
    [{ text: '‚õî –ù–µ—Ç', callback_data: 'comment_no' }],
    getBackHomeRow()
  ]};
}

function getSizeKeyboard() {
  return { inline_keyboard: [
    [{ text: '–û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥) - 100‚ÇΩ', callback_data: 'size_one_bag' }],
    [{ text: '–î–≤–∞ –ø–∞–∫–µ—Ç–∞ - 200‚ÇΩ', callback_data: 'size_two_bags' }],
    [{ text: '–¢—Ä–∏ –ø–∞–∫–µ—Ç–∞ - 300‚ÇΩ', callback_data: 'size_three_bags' }],
    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
  ]};
}

function getTimeKeyboard() {
  return { inline_keyboard: [
    [{ text: '‚è∞ –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞', callback_data: 'time_within_hour' }],
    [{ text: 'üåÖ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º', callback_data: 'time_tomorrow_morning' }],
    [{ text: 'üìÖ –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è', callback_data: 'time_custom' }],
    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
  ]};
}

function getConfirmationKeyboard() {
  return { inline_keyboard: [
    [{ text: '‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_order' }],
    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
  ]};
}

async function handleStart(message: TelegramMessage) {
  // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await updateUserState(message.from.id, 'awaiting_role', { bags: [], bag_count: 0 });
  const text = 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî <b>–ú—É—Å–æ—Ä–æ–±–æ—Ç</b> ü§ñ\n\n–ö—Ç–æ –≤—ã? –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–∏–∂–µ:';
  await sendMessage(message.chat.id, text, getRoleKeyboard());
}

async function handleAdminId(message: TelegramMessage) {
  const chatId = message.chat.id;
  const text = message.text || '';
  const parts = text.split(' ');
  
  if (parts.length < 2) {
    await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adminid 123456789');
    return;
  }
  
  const adminId = parts[1];
  
  // Save admin ID to bot_settings
  const { error } = await supabase
    .from('bot_settings')
    .upsert({ key: 'admin_chat_id', value: adminId, updated_at: new Date().toISOString() });
  
  if (error) {
    console.error('Error saving admin ID:', error);
    await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    return;
  }
  
  await sendMessage(chatId, `‚úÖ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${adminId}`);
}

async function handleHelp(message: TelegramMessage) {
  const helpText = `
‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –≤—ã–≤–æ–∑ –º—É—Å–æ—Ä–∞:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
2. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Å–æ—Ä–∞
4. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–≤–æ–∑–∞
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

<b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ –û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥) - 100‚ÇΩ
‚Ä¢ –î–≤–∞ –ø–∞–∫–µ—Ç–∞ - 200‚ÇΩ
‚Ä¢ –¢—Ä–∏ –ø–∞–∫–µ—Ç–∞ - 300‚ÇΩ

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
üìû –î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é`;
  await sendMessage(message.chat.id, helpText, getMainMenuKeyboard());
}

async function saveOrder(userId: number, chatId: number, user: TelegramUser, tempData: any, status: string = 'new') {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º size_option –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞–∫–µ—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–µ–±-CRM)
  const count = (tempData.bags?.length ?? 0) || (tempData.size ? (tempData.size === 'one_bag' ? 1 : tempData.size === 'two_bags' ? 2 : 3) : 1);
  const size_option = count === 1 ? 'one_bag' : count === 2 ? 'two_bags' : 'three_bags';

  // –í—Ä–µ–º—è
  let time_option = 'custom';
  let custom_time: string | null = null;
  if (tempData.time === 'within_hour' || tempData.time_option === 'within_hour') {
    time_option = 'within_hour';
  }
  custom_time = tempData.time_text || tempData.custom_time || null;

  // –°—É–º–º–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
  const amountRub = typeof tempData.amount === 'number' ? tempData.amount : (size_option === 'one_bag' ? 100 : size_option === 'two_bags' ? 200 : 300);
  const amount = Math.max(100, Math.round(amountRub)) * 100;

  const order = {
    user_id: userId,
    username: user.username || null,
    first_name: user.first_name,
    last_name: user.last_name || null,
    address: tempData.address,
    size_option,
    time_option,
    custom_time,
    amount,
    status,
    comment: tempData.comment || null,
    bags: Array.isArray(tempData.bags) ? tempData.bags : null,
  };

  const { data, error } = await supabase.from('orders').insert(order).select().single();
  if (error) { console.error('Error saving order:', error); return null; }
  return data;
}

async function notifyProviders(order: any) {
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –≥–æ—Ä–æ–¥–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const { data: providers } = await supabase
    .from('tg_user_profile')
    .select('user_id, city, notification_filter, schedule_days, schedule_time')
    .eq('role', 'performer')
    .not('city', 'is', null);

  if (!providers || providers.length === 0) return;

  const isUrgent = order.time_option === 'within_hour';
  const bagCount = order.bags ? order.bags.length : 1;
  const isLarge = bagCount >= 2;

  for (const provider of providers) {
    // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —á–∞—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞ –≤ –∞–¥—Ä–µ—Å–µ)
    // TODO: —É–ª—É—á—à–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∞–¥—Ä–µ—Å–∞
    if (provider.city && !order.address.toLowerCase().includes(provider.city.toLowerCase())) {
      continue;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (provider.notification_filter === 'filter_none') continue;
    if (provider.notification_filter === 'filter_urgent' && !isUrgent) continue;
    if (provider.notification_filter === 'filter_large' && !isLarge) continue;

    // TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notificationText = `
üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>

üìç ${order.address}
üí∞ ${order.amount / 100}‚ÇΩ
‚è∞ ${isUrgent ? '–°—Ä–æ—á–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞)' : order.custom_time || order.time_option}

üëâ –û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –∑–∞–∫–∞–∑!`;

    await sendMessage(provider.user_id, notificationText, {
      inline_keyboard: [
        [{ text: 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑', callback_data: 'provider_new_orders' }],
        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'provider_main_menu' }]
      ]
    });
  }
}

async function getAdminChatId(): Promise<string | null> {
  // Try to get from bot_settings first
  const { data, error } = await supabase
    .from('bot_settings')
    .select('value')
    .eq('key', 'admin_chat_id')
    .maybeSingle();
  
  if (!error && data?.value) {
    return data.value;
  }
  
  // Fallback to environment variable
  return Deno.env.get('TELEGRAM_ADMIN_CHAT_ID') || null;
}

async function notifyAdmin(order: any) {
  const adminChatId = await getAdminChatId();
  if (!adminChatId) {
    console.log('Admin chat ID not configured');
    return;
  }
  
  const sizeNames: { [key: string]: string } = { 'one_bag': '–û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥)', 'two_bags': '–î–≤–∞ –ø–∞–∫–µ—Ç–∞', 'three_bags': '–¢—Ä–∏ –ø–∞–∫–µ—Ç–∞' };
  const timeNames: { [key: string]: string } = { 'within_hour': '–í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞', 'custom': '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è' };
  const bagsText = order.bags ? `\nüõçÔ∏è –ü–∞–∫–µ—Ç—ã: ${order.bags.join(', ')}` : '';
  const commentText = order.comment ? `\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}` : '';
  const adminText = `
üîî <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${order.id.slice(-8)}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.first_name} ${order.last_name || ''}
üì± <b>Username:</b> ${order.username ? '@' + order.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${order.address}
üì¶ <b>–û–±—ä–µ–º:</b> ${sizeNames[order.size_option]}${bagsText}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${timeNames[order.time_option]}${order.custom_time ? ' (' + order.custom_time + ')' : ''}
üí∞ <b>–°—É–º–º–∞:</b> ${order.amount / 100}‚ÇΩ
üè∑Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> ${order.status}
${commentText}

üìÖ <b>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</b> ${new Date(order.created_at).toLocaleString('ru-RU')}`;
  await sendMessage(parseInt(adminChatId), adminText);
}

async function handleCallbackQuery(callbackQuery: TelegramCallbackQuery) {
  const userId = callbackQuery.from.id;
  const chatId = callbackQuery.message!.chat.id;
  const data = callbackQuery.data!;
  await answerCallbackQuery(callbackQuery.id);
  const userState = await getUserState(userId);
  const temp = { ...(userState.data || {}) };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–ø–æ–¥—Å–∫–∞–∑–∫–∏
  const showRole = async () => {
    await updateUserState(userId, 'awaiting_role', { bags: [], bag_count: 0 });
    await sendMessage(chatId, '–ö—Ç–æ –≤—ã? –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–∏–∂–µ:', getRoleKeyboard());
  };
  const showGreeting = async () => {
    await updateUserState(userId, 'customer_greeting', temp);
    await sendMessage(chatId, 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ú—É—Å–æ—Ä–æ–±–æ—Ç ü§ñ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ü–∏–≤–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –º—É—Å–æ—Ä–∞. –ù–∞—á–Ω—ë–º –∑–∞–∫–∞–∑?', getStartOrderKeyboard());
  };
  const showAskCity = async () => {
    await updateUserState(userId, 'awaiting_city', temp);
    await sendMessage(chatId, 'üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', { inline_keyboard: [getBackHomeRow()] });
  };
  const showAskAddress = async () => {
    await updateUserState(userId, 'awaiting_address', temp);
    await sendMessage(chatId, 'üìç –£—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞).', { inline_keyboard: [getBackHomeRow()] });
  };
  const showSaveAddress = async () => {
    await updateUserState(userId, 'ask_save_address', temp);
    await sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ, –∞–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω ‚úÖ. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤?', getSaveAddressKeyboard());
  };
  const showTimeChoice = async () => {
    await updateUserState(userId, 'awaiting_time_choice', temp);
    await sendMessage(chatId, '‚è∞ –ö–æ–≥–¥–∞ –≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä?', getTimeChoiceKeyboard());
  };
  const showTimeSlots = async () => {
    await updateUserState(userId, 'awaiting_time_slot', temp);
    await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è:', getTimeSlotsKeyboard());
  };
  const showBagSelection = async () => {
    await updateUserState(userId, 'awaiting_bag_selection', temp);
    await sendMessage(chatId, 'üõçÔ∏è –°–∫–æ–ª—å–∫–æ –∏ –∫–∞–∫–∏–µ –ø–∞–∫–µ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏?', getBagCountKeyboard());
  };
  const showNextBagSize = async () => {
    const nextIdx = (temp.bags?.length || 0) + 1;
    await updateUserState(userId, 'awaiting_multi_bag_size', temp);
    await sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–∞ ${nextIdx}:`, getBagSizeKeyboard(nextIdx));
  };
  const showPayment = async () => {
    const amountSet = typeof temp.amount === 'number' && temp.amount >= 100;
    await updateUserState(userId, 'awaiting_payment', temp);
    await sendMessage(chatId, 'üí≥ –ö–∞–∫ –æ–ø–ª–∞—Ç–∏–º?', getPaymentKeyboard(!!amountSet));
  };
  const showCommentChoice = async () => {
    await updateUserState(userId, 'awaiting_comment_choice', temp);
    await sendMessage(chatId, 'üéÅ –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–∞?', getCommentChoiceKeyboard());
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
  switch (data) {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    case 'go_home':
      return await showRole();
    case 'go_back':
      switch (userState.state) {
        case 'customer_greeting': return await showRole();
        case 'awaiting_city': return await showGreeting();
        case 'awaiting_address': return await showAskCity();
        case 'ask_save_address': return await showAskAddress();
        case 'awaiting_time_choice': return await showSaveAddress();
        case 'awaiting_time_slot': return await showTimeChoice();
        case 'awaiting_bag_selection': return await showTimeChoice();
        case 'awaiting_multi_bag_size': return await showBagSelection();
        case 'awaiting_payment': return await showBagSelection();
        case 'awaiting_custom_amount': return await showPayment();
        case 'awaiting_comment_choice': return await showPayment();
        case 'awaiting_comment_text': return await showCommentChoice();
        default: return await showRole();
      }

    // –í—ã–±–æ—Ä —Ä–æ–ª–∏
    case 'role_customer': {
      await supabase.from('tg_user_profile').upsert({ user_id: userId, role: 'customer' });
      return await showGreeting();
    }
    case 'role_performer': {
      const { data: profile } = await supabase
        .from('tg_user_profile')
        .select('city')
        .eq('user_id', userId)
        .single();
      
      if (!profile?.city) {
        await supabase.from('tg_user_profile').upsert({ user_id: userId, role: 'performer' });
        await updateUserState(userId, 'awaiting_provider_city', {});
        return await sendMessage(
          chatId,
          'ü¶∏‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–µ—Ä–æ–π —á–∏—Å—Ç–æ—Ç—ã!\n\nüåÜ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:\n\n(–ì–æ—Ä–æ–¥ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)'
        );
      }
      
      await supabase.from('tg_user_profile').upsert({ user_id: userId, role: 'performer' });
      await updateUserState(userId, 'start', {});
      return await sendMessage(chatId, 'ü¶∏‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–µ—Ä–æ–π —á–∏—Å—Ç–æ—Ç—ã!\n\n–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –ø–æ–¥–≤–∏–≥–∞–º –ø–æ –≤—ã–Ω–æ—Å—É –º—É—Å–æ—Ä–∞? üöÄ\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', getProviderMainMenuKeyboard());
    }

    // –°—Ç–∞—Ä—Ç –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞)
    case 'start_order_yes': {
      const { data: profile } = await supabase
        .from('tg_user_profile')
        .select('saved_address')
        .eq('user_id', userId)
        .single();
      
      if (profile?.saved_address) {
        temp.saved_address_available = profile.saved_address;
        await updateUserState(userId, 'choose_address_option', temp);
        return await sendMessage(
          chatId,
          'üìç –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:\n\n' + profile.saved_address + '\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ?',
          {
            inline_keyboard: [
              [{ text: '‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', callback_data: 'use_saved_address' }],
              [{ text: 'üè† –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å', callback_data: 'enter_new_address' }],
              getBackHomeRow()
            ]
          }
        );
      }
      
      return await showAskCity();
    }
    case 'start_order_no':
      return await showRole();
    
    case 'use_saved_address':
      temp.address = temp.saved_address_available;
      temp.city = '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≥–æ—Ä–æ–¥';
      await updateUserState(userId, 'ask_save_address', temp);
      return await showAskTime();
    
    case 'enter_new_address':
      return await showAskCity();

    // –°—Ç–∞—Ä–æ–µ –º–µ–Ω—é (–æ—Å—Ç–∞–≤–∏–º —Ä–∞–±–æ—á–∏–º)
    case 'new_order':
      await updateUserState(userId, 'awaiting_address', {});
      return await sendMessage(chatId, 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):');
    case 'contact_operator':
      return await sendMessage(chatId, 'üìû –î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @operator_username –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (xxx) xxx-xx-xx');
    case 'help':
      return await handleHelp(callbackQuery.message!);

    // –ú–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    case 'provider_main_menu':
      await updateUserState(userId, 'start', {});
      return await sendMessage(chatId, 'ü¶∏‚Äç‚ôÇÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:', getProviderMainMenuKeyboard());

    case 'provider_new_orders': {
      const { data: orders, error } = await supabase
        .from('orders')
        .select('*')
        .eq('status', 'new')
        .order('created_at', { ascending: true })
        .limit(10);

      if (error || !orders || orders.length === 0) {
        return await sendMessage(chatId, 'üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞—á–∫–∏, —è —Å—Ä–∞–∑—É —Ç–µ–±–µ —Å–æ–æ–±—â—É!', getProviderMainMenuKeyboard());
      }

      let message = 'üì¶ –í–æ—Ç —Å–≤–µ–∂–∏–µ –∑–∞–¥–∞—á–∫–∏ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π:\n\n';
      const keyboard = [];

      orders.forEach((order, index) => {
        const bags = order.bags || [];
        const bagsText = bags.length > 0 ? bags.join(', ') : (order.amount / 100) + '‚ÇΩ';
        message += `${index + 1}. üè† ${order.address}\n`;
        message += `   üì¶ ${bagsText}\n`;
        message += `   ‚è∞ ${order.time_option === 'within_hour' ? '–°—Ä–æ—á–Ω–æ' : order.custom_time || '–ü–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é'}\n\n`;
        
        keyboard.push([{ text: `‚ö° –í–∑—è—Ç—å –∑–∞–∫–∞–∑ #${index + 1}`, callback_data: `provider_take_${order.id}` }]);
      });

      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_main_menu' }]);
      return await sendMessage(chatId, message, { inline_keyboard: keyboard });
    }

    case 'provider_my_orders':
      return await sendMessage(
        chatId,
        'üõ† –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
        {
          inline_keyboard: [
            [{ text: '‚ö° –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã', callback_data: 'provider_current_orders' }],
            [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'provider_completed_orders' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_main_menu' }]
          ]
        }
      );

    case 'provider_current_orders': {
      const { data: orders } = await supabase
        .from('orders')
        .select('*')
        .eq('performer_id', userId)
        .eq('status', 'in_progress')
        .order('created_at', { ascending: false })
        .limit(10);

      if (!orders || orders.length === 0) {
        return await sendMessage(
          chatId,
          'üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.\n\n–ó–∞–≥–ª—è–Ω–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã¬ª üì¶',
          {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_my_orders' }]]
          }
        );
      }

      let message = '‚ö° –¢–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:\n\n';
      const keyboard = [];

      orders.forEach((order, index) => {
        message += `${index + 1}. üè† ${order.address}\n`;
        message += `   üì¶ ${order.amount / 100}‚ÇΩ\n`;
        message += `   üïê –°–æ–∑–¥–∞–Ω: ${new Date(order.created_at).toLocaleDateString('ru-RU')}\n\n`;
        keyboard.push([{ text: `‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ #${index + 1}`, callback_data: `provider_request_photos_${order.id}` }]);
      });

      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_my_orders' }]);
      return await sendMessage(chatId, message, { inline_keyboard: keyboard });
    }

    case 'provider_completed_orders': {
      const { data: orders } = await supabase
        .from('orders')
        .select('*')
        .eq('performer_id', userId)
        .eq('status', 'completed')
        .order('updated_at', { ascending: false })
        .limit(20);

      if (!orders || orders.length === 0) {
        return await sendMessage(
          chatId,
          'üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.',
          {
            inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_my_orders' }]]
          }
        );
      }

      let message = '‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n';
      const keyboard = [];

      orders.forEach((order, index) => {
        const earnings = order.amount / 100;
        const commission = Math.max(20, earnings * 0.15);
        const netEarnings = earnings - commission;
        
        message += `${index + 1}. üè† ${order.address}\n`;
        message += `   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${netEarnings.toFixed(2)}‚ÇΩ\n`;
        message += `   üìÖ ${new Date(order.updated_at).toLocaleDateString('ru-RU')}\n`;
        
        if (order.photo_door && order.photo_bin) {
          message += `   üì∏ –§–æ—Ç–æ: –¥–æ—Å—Ç—É–ø–Ω—ã\n`;
        }
        message += `\n`;
      });

      keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_my_orders' }]);

      return await sendMessage(chatId, message, { inline_keyboard: keyboard });
    }

    case 'provider_wallet': {
      const { data: profile } = await supabase
        .from('tg_user_profile')
        .select('eco_points')
        .eq('user_id', userId)
        .single();

      const balance = profile?.eco_points || 0;

      return await sendMessage(
        chatId,
        `üí∞ –¢–≤–æ–π –∫–æ—à–µ–ª—ë–∫\n\nüíµ –ë–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ\n\nüìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n\nüí≥ –•–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ø–∏—Ç—å?`,
        {
          inline_keyboard: [
            [{ text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', callback_data: 'provider_withdraw' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_main_menu' }]
          ]
        }
      );
    }

    case 'provider_withdraw':
      return await sendMessage(chatId, 'üí≥ –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ.\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!', getProviderMainMenuKeyboard());

    case 'provider_settings':
      return await sendMessage(
        chatId,
        '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:',
        {
          inline_keyboard: [
            [{ text: 'üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data: 'provider_change_city' }],
            [{ text: '‚è∞ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', callback_data: 'provider_schedule' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_main_menu' }]
          ]
        }
      );

    case 'provider_change_city':
      await updateUserState(userId, 'awaiting_provider_city', {});
      return await sendMessage(
        chatId,
        'üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:',
        {
          inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_settings' }]]
        }
      );

    case 'provider_schedule':
      return await sendMessage(
        chatId,
        '‚è∞ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π —Ä–∏—Ç–º\n\n–•–æ—á–µ—à—å –±—ã—Ç—å –≤ —Å—Ç—Ä–æ—é –≤—Å–µ–≥–¥–∞ –∏–ª–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é?\n\nüëâ –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:',
        {
          inline_keyboard: [
            [{ text: 'üåç –í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ (–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã 24/7)', callback_data: 'schedule_always' }],
            [{ text: 'üìÖ –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫', callback_data: 'schedule_custom' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_settings' }]
          ]
        }
      );

    case 'schedule_always':
      return await sendMessage(
        chatId,
        '–°—É–ø–µ—Ä! –¢—ã —Ç–µ–ø–µ—Ä—å –∂–µ–ª–µ–∑–Ω—ã–π –≥–µ—Ä–æ–π üí™\n\n–ë—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫.\n\nüëâ –•–æ—á–µ—à—å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –±—Ä–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥?',
        {
          inline_keyboard: [
            [{ text: 'üîî –í—Å–µ –∑–∞–∫–∞–∑—ã', callback_data: 'filter_all' }],
            [{ text: '‚ö° –¢–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ', callback_data: 'filter_urgent' }],
            [{ text: 'üì¶ –¢–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ (2+ –ø–∞–∫–µ—Ç–∞)', callback_data: 'filter_large' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_schedule' }]
          ]
        }
      );

    case 'schedule_custom':
      return await sendMessage(
        chatId,
        '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ üìÖ\n\nüìç –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–Ω–∏:',
        {
          inline_keyboard: [
            [{ text: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', callback_data: 'days_everyday' }],
            [{ text: '–¢–æ–ª—å–∫–æ –±—É–¥–Ω–∏ (–ø–Ω‚Äì–ø—Ç)', callback_data: 'days_weekdays' }],
            [{ text: '–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å–±‚Äì–≤—Å)', callback_data: 'days_weekend' }],
            [{ text: '–£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data: 'days_manual' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_schedule' }]
          ]
        }
      );

    case 'days_everyday':
      temp.schedule_days = 'everyday';
      await updateUserState(userId, userState.state, temp);
      return await sendMessage(
        chatId,
        '–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:',
        {
          inline_keyboard: [
            [{ text: '‚è∞ –° 09:00 –¥–æ 18:00', callback_data: 'time_9_18' }],
            [{ text: '‚è∞ –° 10:00 –¥–æ 20:00', callback_data: 'time_10_20' }],
            [{ text: '–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë', callback_data: 'time_custom_input' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );

    case 'days_weekdays':
      temp.schedule_days = 'weekdays';
      await updateUserState(userId, userState.state, temp);
      return await sendMessage(
        chatId,
        '–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:',
        {
          inline_keyboard: [
            [{ text: '‚è∞ –° 09:00 –¥–æ 18:00', callback_data: 'time_9_18' }],
            [{ text: '‚è∞ –° 10:00 –¥–æ 20:00', callback_data: 'time_10_20' }],
            [{ text: '–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë', callback_data: 'time_custom_input' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );

    case 'days_weekend':
      temp.schedule_days = 'weekend';
      await updateUserState(userId, userState.state, temp);
      return await sendMessage(
        chatId,
        '–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:',
        {
          inline_keyboard: [
            [{ text: '‚è∞ –° 09:00 –¥–æ 18:00', callback_data: 'time_9_18' }],
            [{ text: '‚è∞ –° 10:00 –¥–æ 20:00', callback_data: 'time_10_20' }],
            [{ text: '–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë', callback_data: 'time_custom_input' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );

    case 'days_manual':
      await updateUserState(userId, 'awaiting_manual_days', temp);
      return await sendMessage(
        chatId,
        'üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–Ω–∏ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–Ω, —Å—Ä, –ø—Ç):',
        {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );

    case 'time_9_18':
      temp.schedule_time = '09:00-18:00';
      await updateUserState(userId, userState.state, temp);
      return await sendMessage(
        chatId,
        `–û–∫–µ–π, –≥—Ä–∞—Ñ–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üéØ\n\n–¢—ã –≤ —Å—Ç—Ä–æ—é: ${temp.schedule_days === 'everyday' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : temp.schedule_days === 'weekdays' ? '–ø–Ω‚Äì–ø—Ç' : temp.schedule_days === 'weekend' ? '—Å–±‚Äì–≤—Å' : temp.schedule_days}, —Å 09:00 –¥–æ 18:00\n\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\nüëâ –ß—Ç–æ —Å–ª–∞—Ç—å —Ç–µ–±–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è?`,
        {
          inline_keyboard: [
            [{ text: 'üîî –í—Å–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'filter_all' }],
            [{ text: '‚ö° –¢–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ', callback_data: 'filter_urgent' }],
            [{ text: 'üì¶ –¢–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ', callback_data: 'filter_large' }],
            [{ text: 'üîï –ù–∏—á–µ–≥–æ, —Å–∞–º –±—É–¥—É –∑–∞—Ö–æ–¥–∏—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: 'filter_none' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );

    case 'time_10_20':
      temp.schedule_time = '10:00-20:00';
      await updateUserState(userId, userState.state, temp);
      return await sendMessage(
        chatId,
        `–û–∫–µ–π, –≥—Ä–∞—Ñ–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üéØ\n\n–¢—ã –≤ —Å—Ç—Ä–æ—é: ${temp.schedule_days === 'everyday' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : temp.schedule_days === 'weekdays' ? '–ø–Ω‚Äì–ø—Ç' : temp.schedule_days === 'weekend' ? '—Å–±‚Äì–≤—Å' : temp.schedule_days}, —Å 10:00 –¥–æ 20:00\n\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\nüëâ –ß—Ç–æ —Å–ª–∞—Ç—å —Ç–µ–±–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è?`,
        {
          inline_keyboard: [
            [{ text: 'üîî –í—Å–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'filter_all' }],
            [{ text: '‚ö° –¢–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ', callback_data: 'filter_urgent' }],
            [{ text: 'üì¶ –¢–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ', callback_data: 'filter_large' }],
            [{ text: 'üîï –ù–∏—á–µ–≥–æ, —Å–∞–º –±—É–¥—É –∑–∞—Ö–æ–¥–∏—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: 'filter_none' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );

    case 'time_custom_input':
      await updateUserState(userId, 'awaiting_custom_time_start', temp);
      return await sendMessage(
        chatId,
        '‚è∞ –° –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∏–Ω–∞–µ—à—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00)',
        {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );

    case 'filter_all':
      temp.notification_filter = 'all';
      await supabase.from('tg_user_profile').upsert({
        user_id: userId,
        data: {
          schedule_days: temp.schedule_days,
          schedule_time: temp.schedule_time,
          notification_filter: 'all'
        }
      });
      await updateUserState(userId, 'start', {});
      return await sendMessage(
        chatId,
        `–ì–æ—Ç–æ–≤–æ! ‚úÖ\n\n–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫: ${temp.schedule_days === 'everyday' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : temp.schedule_days === 'weekdays' ? '–ø–Ω‚Äì–ø—Ç' : temp.schedule_days === 'weekend' ? '—Å–±‚Äì–≤—Å' : temp.schedule_days || '–≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏'}, ${temp.schedule_time || '–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤—Å–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n\nüöÄ –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –±—É–¥–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ –∑–∞–∫–∞–∑—ã –ø–æ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.`,
        getProviderMainMenuKeyboard()
      );

    case 'filter_urgent':
      temp.notification_filter = 'urgent';
      await supabase.from('tg_user_profile').upsert({
        user_id: userId,
        data: {
          schedule_days: temp.schedule_days,
          schedule_time: temp.schedule_time,
          notification_filter: 'urgent'
        }
      });
      await updateUserState(userId, 'start', {});
      return await sendMessage(
        chatId,
        `–ì–æ—Ç–æ–≤–æ! ‚úÖ\n\n–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫: ${temp.schedule_days === 'everyday' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : temp.schedule_days === 'weekdays' ? '–ø–Ω‚Äì–ø—Ç' : temp.schedule_days === 'weekend' ? '—Å–±‚Äì–≤—Å' : temp.schedule_days || '–≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏'}, ${temp.schedule_time || '–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n\nüöÄ –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –±—É–¥–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ –∑–∞–∫–∞–∑—ã –ø–æ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.`,
        getProviderMainMenuKeyboard()
      );

    case 'filter_large':
      temp.notification_filter = 'large';
      await supabase.from('tg_user_profile').upsert({
        user_id: userId,
        data: {
          schedule_days: temp.schedule_days,
          schedule_time: temp.schedule_time,
          notification_filter: 'large'
        }
      });
      await updateUserState(userId, 'start', {});
      return await sendMessage(
        chatId,
        `–ì–æ—Ç–æ–≤–æ! ‚úÖ\n\n–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫: ${temp.schedule_days === 'everyday' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : temp.schedule_days === 'weekdays' ? '–ø–Ω‚Äì–ø—Ç' : temp.schedule_days === 'weekend' ? '—Å–±‚Äì–≤—Å' : temp.schedule_days || '–≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏'}, ${temp.schedule_time || '–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã (2+ –ø–∞–∫–µ—Ç–∞)\n\nüöÄ –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –±—É–¥–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ –∑–∞–∫–∞–∑—ã –ø–æ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.`,
        getProviderMainMenuKeyboard()
      );

    case 'filter_none':
      temp.notification_filter = 'none';
      await supabase.from('tg_user_profile').upsert({
        user_id: userId,
        data: {
          schedule_days: temp.schedule_days,
          schedule_time: temp.schedule_time,
          notification_filter: 'none'
        }
      });
      await updateUserState(userId, 'start', {});
      return await sendMessage(
        chatId,
        `–ì–æ—Ç–æ–≤–æ! ‚úÖ\n\n–¢–≤–æ–π –≥—Ä–∞—Ñ–∏–∫: ${temp.schedule_days === 'everyday' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : temp.schedule_days === 'weekdays' ? '–ø–Ω‚Äì–ø—Ç' : temp.schedule_days === 'weekend' ? '—Å–±‚Äì–≤—Å' : temp.schedule_days || '–≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏'}, ${temp.schedule_time || '–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ'}\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\nüöÄ –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –±—É–¥–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ –∑–∞–∫–∞–∑—ã –ø–æ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.`,
        getProviderMainMenuKeyboard()
      );

    case 'cancel':
      await updateUserState(userId, 'start', {});
      return await sendMessage(chatId, '‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', getMainMenuKeyboard());

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    case 'save_address_yes':
      if (temp.address) {
        await supabase.from('tg_user_profile').upsert({ user_id: userId, saved_address: temp.address });
      }
      return await showTimeChoice();
    case 'save_address_no':
      return await showTimeChoice();

    // –í—Ä–µ–º—è –≤—ã–≤–æ–∑–∞
    case 'time_choice_urgent':
      temp.time = 'within_hour';
      await updateUserState(userId, 'awaiting_bag_selection', temp);
      return await showBagSelection();
    case 'time_choice_select':
      return await showTimeSlots();
    case 'time_enter_custom':
      await updateUserState(userId, 'awaiting_custom_time_text', temp);
      return await sendMessage(chatId, '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∑–∞–≤—Ç—Ä–∞ –≤ 14:00¬ª):', { inline_keyboard: [getBackHomeRow()] });

    case 'slot_1h':
      temp.time_text = '–ß–µ—Ä–µ–∑ 1 —á–∞—Å';
      return await showBagSelection();
    case 'slot_today_evening':
      temp.time_text = '–°–µ–≥–æ–¥–Ω—è 18:00‚Äì20:00';
      return await showBagSelection();
    case 'slot_tomorrow_morning':
      temp.time_text = '–ó–∞–≤—Ç—Ä–∞ 10:00‚Äì12:00';
      return await showBagSelection();

    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤ (–æ–¥–∏–Ω –ø–∞–∫–µ—Ç —Å—Ä–∞–∑—É —Å —Ä–∞–∑–º–µ—Ä–æ–º)
    case 'bag_1_small':
      temp.bags = ['small']; temp.bag_count = 1; return await showPayment();
    case 'bag_1_medium':
      temp.bags = ['medium']; temp.bag_count = 1; return await showPayment();
    case 'bag_1_large':
      temp.bags = ['large']; temp.bag_count = 1; return await showPayment();
    case 'bag_2':
      temp.bags = []; temp.bag_count = 2; return await showNextBagSize();
    case 'bag_3':
      temp.bags = []; temp.bag_count = 3; return await showNextBagSize();

    // –£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è 2-3 –ø–∞–∫–µ—Ç–æ–≤
    case 'bag_size_small':
      temp.bags = [...(temp.bags || []), 'small'];
      if (temp.bags.length < temp.bag_count) return await showNextBagSize();
      return await showPayment();
    case 'bag_size_medium':
      temp.bags = [...(temp.bags || []), 'medium'];
      if (temp.bags.length < temp.bag_count) return await showNextBagSize();
      return await showPayment();
    case 'bag_size_large':
      temp.bags = [...(temp.bags || []), 'large'];
      if (temp.bags.length < temp.bag_count) return await showNextBagSize();
      return await showPayment();

    // –û–ø–ª–∞—Ç–∞
    case 'payment_min':
      temp.amount = 100; await updateUserState(userId, 'awaiting_payment', temp);
      return await sendMessage(chatId, '–°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: 100‚ÇΩ', getPaymentKeyboard(true));
    case 'payment_custom':
      await updateUserState(userId, 'awaiting_custom_amount', temp);
      return await sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–µ –º–µ–Ω—å—à–µ 100):', { inline_keyboard: [getBackHomeRow()] });
    case 'pay_now': {
      const order = await saveOrder(userId, chatId, callbackQuery.from, temp, 'new');
      if (order) {
        temp.order_id = order.id;
        await updateUserState(userId, 'awaiting_comment_choice', temp);
        await sendMessage(chatId, '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–∞?', getCommentChoiceKeyboard());
        await notifyAdmin(order);
        await notifyProviders(order);
      } else {
        await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      return;
    }

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    case 'comment_yes':
      await updateUserState(userId, 'awaiting_comment_text', temp);
      return await sendMessage(chatId, '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ó–∞–±—Ä–∞—Ç—å —Å –ø–æ—Ä–æ–≥–∞¬ª, ¬´–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –¥–æ–º–æ—Ñ–æ–Ω¬ª):', { inline_keyboard: [getBackHomeRow()] });
    case 'comment_no':
      await updateUserState(userId, 'start', {});
      return await sendMessage(chatId, '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ö—É—Ä—å–µ—Ä —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã–Ω–µ—Å–µ—Ç –≤–∞—à –º—É—Å–æ—Ä. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ú—É—Å–æ—Ä–æ–±–æ—Ç–∞ ü§ñ‚ú®\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å üè† –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /start.');

    // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: –≤–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞
    default:
      if (data.startsWith('provider_take_')) {
        const orderId = data.replace('provider_take_', '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const { data: orderCheck } = await supabase
          .from('orders')
          .select('*')
          .eq('id', orderId)
          .eq('status', 'new')
          .maybeSingle();

        if (!orderCheck) {
          return await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ —É–∂–µ –≤–∑—è–ª –¥—Ä—É–≥–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.', getProviderMainMenuKeyboard());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const { error } = await supabase
          .from('orders')
          .update({ 
            status: 'in_progress', 
            performer_id: userId,
            updated_at: new Date().toISOString() 
          })
          .eq('id', orderId);

        if (error) {
          console.error('Error taking order:', error);
          return await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞.', getProviderMainMenuKeyboard());
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        temp.current_order_id = orderId;
        await updateUserState(userId, 'provider_working', temp);

        return await sendMessage(
          chatId, 
          'üéâ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!\n\n–ó–∞–∫–∞–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ —Ç–æ–±–æ–π.\n\nüì∏ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞:\n\n1Ô∏è‚É£ –§–æ—Ç–æ –ø–∞–∫–µ—Ç–∞ –≤–æ–∑–ª–µ –¥–≤–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞\n2Ô∏è‚É£ –§–æ—Ç–æ –ø–∞–∫–µ—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ –º—É—Å–æ—Ä–∫–∏\n\n–ù–∞—á–Ω—ë–º?',
          {
            inline_keyboard: [
              [{ text: 'üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–ª –ø–∞–∫–µ—Ç –≤–æ–∑–ª–µ –¥–≤–µ—Ä–∏', callback_data: `photo_at_door_${orderId}` }],
              [{ text: 'ü§ù –ü–µ—Ä–µ–¥–∞–ª –≤ —Ä—É–∫–∏', callback_data: `handed_over_${orderId}` }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'provider_my_orders' }]
            ]
          }
        );
      }

      // –§–æ—Ç–æ —É –¥–≤–µ—Ä–∏
      if (data.startsWith('photo_at_door_')) {
        const orderId = data.replace('photo_at_door_', '');
        temp.current_order_id = orderId;
        temp.photo_step = 'at_door';
        await updateUserState(userId, 'awaiting_photo_at_door', temp);
        return await sendMessage(chatId, 'üì∏ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –º—É—Å–æ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –≤–æ–∑–ª–µ –¥–≤–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞.');
      }

      // –ü–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ä—É–∫–∏
      if (data.startsWith('handed_over_')) {
        const orderId = data.replace('handed_over_', '');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É
        const { data: order } = await supabase
          .from('orders')
          .select('*')
          .eq('id', orderId)
          .single();

        if (order) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑—á–∏–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
          await sendMessage(
            order.user_id,
            'ü§ù –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–æ–æ–±—â–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–ª –≤–∞–º –º—É—Å–æ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç –≤ —Ä—É–∫–∏.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:',
            {
              inline_keyboard: [
                [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data: `confirm_handover_${orderId}` }],
                [{ text: '‚ùå –ù–µ –ø–æ–ª—É—á–∞–ª', callback_data: `deny_handover_${orderId}` }]
              ]
            }
          );
        }

        temp.current_order_id = orderId;
        temp.handover_requested = true;
        await updateUserState(userId, 'awaiting_handover_confirmation', temp);
        return await sendMessage(chatId, '‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...');
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ä—É–∫–∏ –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞
      if (data.startsWith('confirm_handover_')) {
        const orderId = data.replace('confirm_handover_', '');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const { data: order } = await supabase
          .from('orders')
          .select('performer_id')
          .eq('id', orderId)
          .single();

        if (order?.performer_id) {
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          const performerState = await getUserState(order.performer_id);
          const performerTemp = performerState.data || {};
          performerTemp.current_order_id = orderId;
          performerTemp.photo_step = 'at_bin';
          await updateUserState(order.performer_id, 'awaiting_photo_at_bin', performerTemp);
          
          await sendMessage(
            order.performer_id,
            '‚úÖ –ó–∞–∫–∞–∑—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–ª—É—á–µ–Ω–∏–µ!\n\nüì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —ç—Ç–æ–≥–æ –º—É—Å–æ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ –º—É—Å–æ—Ä–∫–∏.'
          );
        }

        return await sendMessage(chatId, '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!');
      }

      // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ä—É–∫–∏
      if (data.startsWith('deny_handover_')) {
        const orderId = data.replace('deny_handover_', '');
        
        const { data: order } = await supabase
          .from('orders')
          .select('performer_id')
          .eq('id', orderId)
          .single();

        if (order?.performer_id) {
          await sendMessage(
            order.performer_id,
            '‚ùå –ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —É –¥–≤–µ—Ä–∏.',
            {
              inline_keyboard: [
                [{ text: 'üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞–ª —É –¥–≤–µ—Ä–∏', callback_data: `photo_at_door_${orderId}` }],
                [{ text: 'üîô –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º', callback_data: 'provider_my_orders' }]
              ]
            }
          );
        }

        return await sendMessage(chatId, '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º
      if (data.startsWith('check_order_')) {
        const orderId = data.replace('check_order_', '');
        
        const { data: order } = await supabase
          .from('orders')
          .select('*')
          .eq('id', orderId)
          .single();
        
        if (!order) {
          return await sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        if (order.photo_door || order.photo_bin) {
          let message = 'üì∏ –§–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:\n\n';
          
          if (order.photo_door) {
            message += '‚úÖ –§–æ—Ç–æ —É –¥–≤–µ—Ä–∏: –µ—Å—Ç—å\n';
          } else {
            message += '‚ùå –§–æ—Ç–æ —É –¥–≤–µ—Ä–∏: –Ω–µ—Ç\n';
          }
          
          if (order.photo_bin) {
            message += '‚úÖ –§–æ—Ç–æ —É –º—É—Å–æ—Ä–∫–∏: –µ—Å—Ç—å\n';
          } else {
            message += '‚ùå –§–æ—Ç–æ —É –º—É—Å–æ—Ä–∫–∏: –Ω–µ—Ç\n';
          }
          
          await sendMessage(chatId, message);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          if (order.photo_door) {
            await sendPhoto(chatId, order.photo_door, 'üì∑ –§–æ—Ç–æ –º—É—Å–æ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —É –¥–≤–µ—Ä–∏');
          }
          
          if (order.photo_bin) {
            await sendPhoto(chatId, order.photo_bin, 'üì∑ –§–æ—Ç–æ –º—É—Å–æ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —É –º—É—Å–æ—Ä–∫–∏');
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ü–µ–Ω–∫–∞
          if (order.rating) {
            const stars = '‚≠ê'.repeat(order.rating);
            return await sendMessage(
              chatId,
              `${stars} –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑: ${order.rating}/5\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è:`,
              {
                inline_keyboard: [
                  [{ text: 'üìû –ù–ê–ü–ò–°–ê–¢–¨ –í –ü–û–î–î–ï–†–ñ–ö–£', callback_data: `support_${orderId}` }]
                ]
              }
            );
          }
          
          return await sendMessage(
            chatId, 
            '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ? üåü',
            {
              inline_keyboard: [
                [{ text: '‚≠ê', callback_data: `rate_${orderId}_1` }],
                [{ text: '‚≠ê‚≠ê', callback_data: `rate_${orderId}_2` }],
                [{ text: '‚≠ê‚≠ê‚≠ê', callback_data: `rate_${orderId}_3` }],
                [{ text: '‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: `rate_${orderId}_4` }],
                [{ text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: `rate_${orderId}_5` }]
              ]
            }
          );
        } else {
          return await sendMessage(
            chatId, 
            'üì≠ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.'
          );
        }
      }

      // –û—Ü–µ–Ω–∫–∞ –∑–∞–∫–∞–∑–∞
      if (data.startsWith('rate_')) {
        const parts = data.split('_');
        const orderId = parts[1];
        const rating = parseInt(parts[2]);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        const { data: order } = await supabase
          .from('orders')
          .select('*')
          .eq('id', orderId)
          .single();

        if (!order) {
          return await sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞–∫–∞–∑–∞
        await supabase
          .from('orders')
          .update({ rating })
          .eq('id', orderId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (order.performer_id) {
          const { data: profile } = await supabase
            .from('tg_user_profile')
            .select('average_rating, rating_count')
            .eq('user_id', order.performer_id)
            .maybeSingle();

          const currentRating = profile?.average_rating || 0;
          const currentCount = profile?.rating_count || 0;
          const newCount = currentCount + 1;
          const newRating = ((currentRating * currentCount) + rating) / newCount;

          await supabase
            .from('tg_user_profile')
            .upsert({
              user_id: order.performer_id,
              average_rating: Number(newRating.toFixed(2)),
              rating_count: newCount,
              updated_at: new Date().toISOString()
            });
        }
        
        const stars = '‚≠ê'.repeat(rating);
        return await sendMessage(
          chatId,
          `${stars} –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!\n\n–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ. üôè\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è:`,
          {
            inline_keyboard: [
              [{ text: 'üìû –ù–ê–ü–ò–°–ê–¢–¨ –í –ü–û–î–î–ï–†–ñ–ö–£', callback_data: `support_${orderId}` }]
            ]
          }
        );
      }

      // –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
      if (data.startsWith('support_')) {
        const orderId = data.replace('support_', '');
        temp.support_order_id = orderId;
        await updateUserState(userId, 'awaiting_support_message', temp);
        return await sendMessage(chatId, '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:');
      }

      // –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
      if (data.startsWith('provider_request_photos_')) {
        const orderId = data.replace('provider_request_photos_', '');
        temp.current_order_id = orderId;
        temp.photo_step = 'at_door';
        await updateUserState(userId, 'awaiting_photo_at_door', temp);
        return await sendMessage(
          chatId,
          'üì∏ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å 2 —Ñ–æ—Ç–æ:\n\n1Ô∏è‚É£ –§–æ—Ç–æ –º—É—Å–æ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –≤–æ–∑–ª–µ –¥–≤–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞\n2Ô∏è‚É£ –§–æ—Ç–æ –ø–∞–∫–µ—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ –º—É—Å–æ—Ä–∫–∏\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ (—É –¥–≤–µ—Ä–∏):'
        );
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ä—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      if (data.startsWith('provider_complete_')) {
        const orderId = data.replace('provider_complete_', '');
        temp.current_order_id = orderId;
        await updateUserState(userId, 'awaiting_completion_confirm', temp);
        
        return await sendMessage(
          chatId,
          '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.\n\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á—ë—Ç.',
          {
            inline_keyboard: [
              [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: `final_confirm_${orderId}` }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'provider_my_orders' }]
            ]
          }
        );
      }

      // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      if (data.startsWith('final_confirm_')) {
        const orderId = data.replace('final_confirm_', '');
        
        const { data: order, error } = await supabase
          .from('orders')
          .update({ status: 'completed', updated_at: new Date().toISOString() })
          .eq('id', orderId)
          .eq('performer_id', userId)
          .select()
          .maybeSingle();

        if (error || !order) {
          console.error('Error completing order:', error);
          return await sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑.', getProviderMainMenuKeyboard());
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ (—Å—É–º–º–∞ –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è 15%, –º–∏–Ω–∏–º—É–º 20 —Ä—É–±)
        const totalAmount = order.amount / 100;
        const commission = Math.max(20, totalAmount * 0.15);
        const earnings = totalAmount - commission;

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const { data: profile } = await supabase
          .from('tg_user_profile')
          .select('eco_points')
          .eq('user_id', userId)
          .maybeSingle();

        const currentBalance = profile?.eco_points || 0;
        await supabase
          .from('tg_user_profile')
          .upsert({ 
            user_id: userId, 
            eco_points: currentBalance + earnings 
          });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        await sendMessage(
          order.user_id,
          `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\nüéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ú—É—Å–æ—Ä–æ–±–æ—Ç–∞! ü§ñ‚ú®\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–∫–∞–∑:`,
          {
            inline_keyboard: [
              [{ text: 'üì∏ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', callback_data: `check_order_${orderId}` }]
            ]
          }
        );

        await updateUserState(userId, 'provider_main', {});
        return await sendMessage(
          chatId, 
          `üåü –ö—Ä–∞—Å–æ—Ç–∞! –ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç.\n\nüí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: +${earnings.toFixed(2)}‚ÇΩ\nüí∏ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: ${commission.toFixed(2)}‚ÇΩ\n\nüíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${(currentBalance + earnings).toFixed(2)}‚ÇΩ`, 
          getProviderMainMenuKeyboard()
        );
      }
  }
}


async function showOrderSummary(chatId: number, tempData: any) {
  const sizeNames: { [key: string]: string } = { 'one_bag': '–û–¥–∏–Ω –ø–∞–∫–µ—Ç (–¥–æ 6 –∫–≥)', 'two_bags': '–î–≤–∞ –ø–∞–∫–µ—Ç–∞', 'three_bags': '–¢—Ä–∏ –ø–∞–∫–µ—Ç–∞' };
  const sizeAmounts: { [key: string]: number } = { 'one_bag': 100, 'two_bags': 200, 'three_bags': 300 };
  const timeNames: { [key: string]: string } = { 'within_hour': '–í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞', 'tomorrow_morning': '–ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º', 'custom': '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è' };
  const summaryText = `
üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:</b>

üìç <b>–ê–¥—Ä–µ—Å:</b> ${tempData.address}
üì¶ <b>–û–±—ä–µ–º:</b> ${sizeNames[tempData.size]}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${timeNames[tempData.time]}${tempData.custom_time ? ' (' + tempData.custom_time + ')' : ''}
üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${sizeAmounts[tempData.size]}‚ÇΩ`;
  await sendMessage(chatId, summaryText, getConfirmationKeyboard());
}

async function handleTextMessage(message: TelegramMessage) {
  const userId = message.from.id;
  const chatId = message.chat.id;
  const text = message.text?.trim() || '';
  const userState = await getUserState(userId);
  const temp = { ...(userState.data || {}) };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
  if (message.photo && (userState.state === 'awaiting_photo_at_door' || userState.state === 'awaiting_photo_at_bin')) {
    const orderId = temp.current_order_id;
    
    if (!orderId) {
      await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
    const photoFileId = message.photo[message.photo.length - 1].file_id;

    if (userState.state === 'awaiting_photo_at_door') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ —É –¥–≤–µ—Ä–∏ –≤ –ë–î
      await supabase
        .from('orders')
        .update({ photo_door: photoFileId })
        .eq('id', orderId);

      temp.photo_at_door_received = true;
      temp.photo_step = 'at_bin';
      await updateUserState(userId, 'awaiting_photo_at_bin', temp);
      return await sendMessage(
        chatId,
        '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ —É –¥–≤–µ—Ä–∏ –ø–æ–ª—É—á–µ–Ω–æ.\n\nüì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —ç—Ç–æ–≥–æ –º—É—Å–æ—Ä–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–∞ —Ñ–æ–Ω–µ –º—É—Å–æ—Ä–∫–∏.'
      );
    }

    if (userState.state === 'awaiting_photo_at_bin') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ —É –º—É—Å–æ—Ä–∫–∏ –≤ –ë–î
      await supabase
        .from('orders')
        .update({ photo_bin: photoFileId })
        .eq('id', orderId);

      temp.photo_at_bin_received = true;
      await updateUserState(userId, 'provider_ready_to_complete', temp);
      return await sendMessage(
        chatId,
        '‚úÖ –°—É–ø–µ—Ä! –û–±–∞ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã.\n\nüéØ –ì–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑?',
        {
          inline_keyboard: [
            [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `provider_complete_${orderId}` }],
            [{ text: 'üîô –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º', callback_data: 'provider_my_orders' }]
          ]
        }
      );
    }
  }

  switch (userState.state) {
    case 'awaiting_provider_city':
      if (text.length < 2) {
        await sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
        return;
      }
      await supabase.from('tg_user_profile').upsert({ 
        user_id: userId, 
        city: text,
        role: 'performer'
      });
      await updateUserState(userId, 'start', {});
      await sendMessage(
        chatId,
        `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ä–æ–¥ "${text}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\nüìç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\nüîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã.`,
        getProviderMainMenuKeyboard()
      );
      return;

    case 'awaiting_city':
      if (text.length < 2) { await sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.', { inline_keyboard: [getBackHomeRow()] }); return; }
      temp.city = text;
      await updateUserState(userId, 'awaiting_address', temp);
      await sendMessage(chatId, 'üìç –£—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞).', { inline_keyboard: [getBackHomeRow()] });
      return;

    case 'awaiting_address':
      if (text.length < 5) { await sendMessage(chatId, '‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å.', { inline_keyboard: [getBackHomeRow()] }); return; }
      temp.address = text;
      await updateUserState(userId, 'ask_save_address', temp);
      await sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ, –∞–¥—Ä–µ—Å –∑–∞–ø–∏—Å–∞–Ω ‚úÖ. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤?', getSaveAddressKeyboard());
      return;

    case 'awaiting_custom_time_text':
      temp.time_text = text;
      await updateUserState(userId, 'awaiting_bag_selection', temp);
      await sendMessage(chatId, 'üõçÔ∏è –°–∫–æ–ª—å–∫–æ –∏ –∫–∞–∫–∏–µ –ø–∞–∫–µ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏?', getBagCountKeyboard());
      return;

    case 'awaiting_custom_amount': {
      const amount = parseInt(text.replace(/\D/g, ''));
      if (!amount || amount < 100) {
        await sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–µ –º–µ–Ω—å—à–µ 100‚ÇΩ).', { inline_keyboard: [getBackHomeRow()] });
        return;
      }
      temp.amount = amount;
      await updateUserState(userId, 'awaiting_payment', temp);
      await sendMessage(chatId, `–°—É–º–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${amount}‚ÇΩ`, getPaymentKeyboard(true));
      return;
    }

    case 'awaiting_comment_text': {
      if (!temp.order_id) {
        await sendMessage(chatId, '‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start');
        await updateUserState(userId, 'start', {});
        return;
      }
      await supabase.from('orders').update({ comment: text }).eq('id', temp.order_id);
      await updateUserState(userId, 'start', {});
      await sendMessage(chatId, '‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ö—É—Ä—å–µ—Ä —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—ã–Ω–µ—Å–µ—Ç –≤–∞—à –º—É—Å–æ—Ä. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ú—É—Å–æ—Ä–æ–±–æ—Ç–∞ ü§ñ‚ú®');
      return;
    }

    case 'awaiting_photo_at_door':
    case 'awaiting_photo_at_bin':
      await sendMessage(chatId, 'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ —Ç–µ–∫—Å—Ç).');
      return;
    
    case 'awaiting_check_completion':
      await sendMessage(chatId, 'üìã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.');
      return;

    case 'awaiting_manual_days':
      temp.schedule_days = text;
      await updateUserState(userId, userState.state, temp);
      await sendMessage(
        chatId,
        '–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:',
        {
          inline_keyboard: [
            [{ text: '‚è∞ –° 09:00 –¥–æ 18:00', callback_data: 'time_9_18' }],
            [{ text: '‚è∞ –° 10:00 –¥–æ 20:00', callback_data: 'time_10_20' }],
            [{ text: '–£–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë', callback_data: 'time_custom_input' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );
      return;

    case 'awaiting_custom_time_start':
      temp.schedule_time_start = text;
      await updateUserState(userId, 'awaiting_custom_time_end', temp);
      await sendMessage(
        chatId,
        '‚è∞ –î–æ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00)',
        {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );
      return;

    case 'awaiting_custom_time_end':
      temp.schedule_time = `${temp.schedule_time_start}-${text}`;
      await updateUserState(userId, userState.state, temp);
      await sendMessage(
        chatId,
        `–û–∫–µ–π, –≥—Ä–∞—Ñ–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! üéØ\n\n–¢—ã –≤ —Å—Ç—Ä–æ—é: ${temp.schedule_days === 'everyday' ? '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' : temp.schedule_days === 'weekdays' ? '–ø–Ω‚Äì–ø—Ç' : temp.schedule_days === 'weekend' ? '—Å–±‚Äì–≤—Å' : temp.schedule_days}, —Å ${temp.schedule_time}\n\n–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\nüëâ –ß—Ç–æ —Å–ª–∞—Ç—å —Ç–µ–±–µ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è?`,
        {
          inline_keyboard: [
            [{ text: 'üîî –í—Å–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'filter_all' }],
            [{ text: '‚ö° –¢–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ', callback_data: 'filter_urgent' }],
            [{ text: 'üì¶ –¢–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã–µ', callback_data: 'filter_large' }],
            [{ text: 'üîï –ù–∏—á–µ–≥–æ, —Å–∞–º –±—É–¥—É –∑–∞—Ö–æ–¥–∏—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å', callback_data: 'filter_none' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'schedule_custom' }]
          ]
        }
      );
      return;

    case 'awaiting_support_message': {
      const orderId = temp.support_order_id;
      
      if (!orderId || !text) {
        await sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
      const { data: order } = await supabase
        .from('orders')
        .select('*')
        .eq('id', orderId)
        .single();

      if (!order) {
        await sendMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      const adminChatId = await getAdminChatId();
      if (adminChatId) {
        const adminMessage = `üìû <b>–û–ë–†–ê–©–ï–ù–ò–ï –í –ü–û–î–î–ï–†–ñ–ö–£</b>\n\n` +
          `üë§ –û—Ç: ${message.from.first_name}${message.from.last_name ? ' ' + message.from.last_name : ''}` +
          `${message.from.username ? ` (@${message.from.username})` : ''}\n` +
          `üì¶ –ó–∞–∫–∞–∑ ID: ${orderId.slice(-8)}\n` +
          `üìç –ê–¥—Ä–µ—Å: ${order.address}\n` +
          `üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${new Date(order.created_at).toLocaleDateString('ru-RU')}\n` +
          `‚≠ê –û—Ü–µ–Ω–∫–∞: ${order.rating ? order.rating + '/5' : '–Ω–µ –æ—Ü–µ–Ω–µ–Ω'}\n\n` +
          `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n${text}`;

        await sendMessage(parseInt(adminChatId), adminMessage);
      }

      await updateUserState(userId, 'start', {});
      await sendMessage(chatId, '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.', getMainMenuKeyboard());
      return;
    }

    case 'awaiting_custom_time': // —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º —Å—Ü–µ–Ω–∞—Ä–∏–µ–º
      const tempDataCustomTime = { ...temp, custom_time: text };
      await updateUserState(userId, 'awaiting_confirmation', tempDataCustomTime);
      await showOrderSummary(chatId, tempDataCustomTime);
      return;

    default:
      await sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:', getMainMenuKeyboard());
      return;
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') return new Response('ok', { headers: corsHeaders });
  if (req.method === 'GET') return new Response('ok', { headers: corsHeaders });
  try {
    console.log('telegram_webhook request received', { method: req.method });
    const update: TelegramUpdate = await req.json();
    if (update.message) {
      const message = update.message;
      if (message.text?.startsWith('/start'))        await handleStart(message);
      else if (message.text?.startsWith('/help'))   await handleHelp(message);
      else if (message.text?.startsWith('/adminid')) await handleAdminId(message);
      else if (message.text || message.photo)       await handleTextMessage(message);
    } else if (update && update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }
    return new Response('OK', { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
  } catch (error) {
    console.error('Error processing update (telegram_webhook):', error);
    return new Response('Error', { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
  }
});